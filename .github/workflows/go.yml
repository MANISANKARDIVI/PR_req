name: Go - CI Pipeline
on:
  push:
    branches:
      - main
      - dev
    paths:
      - .github/workflows/go.yml
      - go-test/**
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - dev
    paths:
      - .github/workflows/go.yml
      - go-test/**
jobs:
  test:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Go Version
        uses: actions/setup-go@v5
        with:
          go-version: 1.23.2
          check-latest: true
          cache-dependency-path: go-test/go.sum
      - name: Install dependencies
        run: |
          cd go-test
          ls
          go mod tidy
          go mod download
          
  docker_build_push:
    runs-on: ubuntu-24.04
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
  
      - name: Read version from VERSION file
        id: read_version
        run: |
          VERSION=$(cat go-test/VERSION | xargs)
          echo "VERSION=$VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
  
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
  
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
  
      - name: Get previous tag
        id: get_previous_tag
        run: |
          IMAGE_NAME=${{ secrets.DOCKERHUB_USERNAME }}/go-test
          PREVIOUS_TAG=$(curl -s -u "${{ secrets.DOCKERHUB_USERNAME }}:${{ secrets.DOCKERHUB_TOKEN }}" \
            "https://registry.hub.docker.com/v2/repositories/${IMAGE_NAME}/tags?page_size=100" | \
            jq -r '.results[] | "\(.name) \(.last_updated)"' | \
            sort -k2 -r | head -n 1 | awk '{print $1}')
          if [ -z "$PREVIOUS_TAG" ]; then
            echo "No previous tags found!"
            exit 1
          fi
          echo "PREVIOUS_TAG=$PREVIOUS_TAG"
          echo "PREVIOUS_TAG=$PREVIOUS_TAG" >> $GITHUB_ENV
          
      # - name: Docker Image Build
      #   run: |
      #     cd go-test
      #     docker buildx build --progress=plain --load -t manisankardivi/go-test:${{ env.VERSION }} \
      #     --cache-to type=inline \
      #     --cache-from type=registry,ref=manisankardivi/go-test:${{ env.PREVIOUS_TAG }} .
      #     docker images

      - name: Docker Image Build
        run: |
          cd go-test
          docker buildx build --progress=plain --load -t manisankardivi/go-test:${{ env.VERSION }} \
          --cache-to type=registry,ref=manisankardivi/go-test:${{ env.VERSION }} \
          --cache-from type=registry,ref=manisankardivi/go-test:${{ env.PREVIOUS_TAG }} .
          
      - name: Push image (only push on main branch)
        if: github.ref == 'refs/heads/main'
        run: |
          docker images
          cd go-test
          docker push manisankardivi/go-test:${{ env.VERSION }}
                      
  k8s-manifest-files_update:
    runs-on: ubuntu-24.04
    needs: docker_build_push
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Read version from VERSION file
        run: |
          echo "Listing files in the repository root:"
          ls -la
          echo "Navigating to go-test directory:"
          
          ls -la
          cd go-test
          ls -la
          VERSION=$(cat VERSION)
          echo "Version extracted: $VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV  # Save version to environment variable
          
      - name: Checkout Kubernetes repo
        run: |
          echo "Cloning Kubernetes repo..."
          git clone https://x-access-token:${{ secrets.PERSONAL_ACCESS_TOKEN }}@github.com/MANISANKARDIVI/k8s_repo.git
          cd k8s_repo/go-k8s
          ls -la
          echo "Using version: $VERSION"
          echo "Updating image version in manifest.yaml..."
          sed -i "s|manisankardivi/go-test:.*|manisankardivi/go-test:$VERSION|" manifest.yaml
          # sed -i "s|\$VERSION|$VERSION|" manifest.yaml
          echo "Image Section after update:"
          grep "image: manisankardivi/go-test:*" manifest.yaml
      - name: Check for changes and commit if updated
        run: |
          ls -la
          cd k8s_repo/go-k8s
          git config --global user.email "manisankardivi@gmail.com"
          git config --global user.name "manisankardivi"
          git add manifest.yaml
          if git diff --cached --exit-code --quiet; then
            echo "No changes detected in manifest.yaml. Skipping commit and branch creation."
            echo "SKIP_BRANCH=true" >> $GITHUB_ENV
          else
            echo "Changes detected. Committing changes."
            git commit -m "Updated manifest.yaml with version $VERSION | GitHub Actions Pipeline"
            echo "SKIP_BRANCH=false" >> $GITHUB_ENV
          fi
      - name: Create and push new branch with version (if changes exist)
        if: env.SKIP_BRANCH == 'false'
        run: |
          cd k8s_repo/go-k8s
          git pull origin main --rebase # Ensure the local main is up-to-date with the remote
          NEW_BRANCH="release-v$VERSION"
          echo "Checking if branch $NEW_BRANCH already exists on the remote..."
          if git ls-remote --heads origin "$NEW_BRANCH" | grep "$NEW_BRANCH"; then
            echo "Branch $NEW_BRANCH already exists. Skipping branch creation."
          else
            echo "Branch $NEW_BRANCH does not exist. Creating and pushing it..."
            git checkout -b "$NEW_BRANCH"
            git push origin "$NEW_BRANCH"
            echo "Branch $NEW_BRANCH created and pushed successfully."
          fi
