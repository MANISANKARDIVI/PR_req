name: Go - CI Pipeline
on:
  push:
    branches:
      - main
    paths:
      - '.github/workflows/go.yml'
      - 'go-test/**'
  pull_request:
    branches:
      - dev
    paths:
      - '.github/workflows/go.yml'
      - 'go-test/**'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.23.2
      - name: Install dependencies
        run: |
          cd go-test
          go mod tidy
          go get -v ./...
      - name: Install the application
        run: |
          cd go-test
          go install ./...
      - name: Run tests
        run: |
          cd go-test
          go test -v ./... || exit 1

  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Build the application
        run: |
          cd go-test
          go build -v -o dist/main ./...
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: go-build-artifact
          path: dist/main
          if-no-files-found: warn
      - name: Checking artifact
        run: |
          ls -la

  docker_build_push:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Docker login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Read version from VERSION file
        id: read_version
        run: |
          if [ -f VERSION ]; then
            VERSION=$(cat VERSION | xargs)
            echo "VERSION=$VERSION" >> $GITHUB_ENV
          else
            echo "VERSION file not found!"
            exit 1
          fi
      - name: Build and push Docker image
        run: |
          docker build -t manisankardivi/new:${{ env.VERSION }} .
      - name: Push Docker Image (main branch only)
        if: github.ref == 'refs/heads/main'
        run: |
          docker push manisankardivi/new:${{ env.VERSION }}

  k8s-manifest-files_update:
    runs-on: ubuntu-latest
    needs: docker_build_push
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Read version from VERSION file
        run: |
          VERSION=$(cat VERSION)
          echo "Version extracted: $VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
      - name: Checkout Kubernetes repo
        run: >
          git clone https://x-access-token:${{ secrets.PERSONAL_ACCESS_TOKEN
          }}@github.com/MANISANKARDIVI/k8s_repo.git

          cd k8s_repo

          sed -i "s|image: manisankardivi/new:.*|image: manisankardivi/new:$VERSION|" manifest.yaml

          echo "Image Section:"

          grep "image: manisankardivi/new:" manifest.yaml
      - name: Check for changes and commit if updated
        run: >
          cd k8s_repo

          git config --global user.email "manisankardivi@gmail.com"

          git config --global user.name "manisankardivi"

          git add .

          if git diff --cached --exit-code --quiet; then
            echo "No changes detected in manifest.yaml. Skipping commit and branch creation."
            echo "SKIP_BRANCH=true" >> $GITHUB_ENV
          else
            echo "Changes detected. Committing changes."
            git commit -m "Updated manifest.yaml with version $VERSION | GitHub Actions Pipeline"
            echo "SKIP_BRANCH=false" >> $GITHUB_ENV
          fi
      - name: Create and push new branch with version (if changes exist)
        if: env.SKIP_BRANCH == 'false'
        run: |
          cd k8s_repo
          NEW_BRANCH="release-v$VERSION"
          git checkout -b "$NEW_BRANCH"
          git push origin "$NEW_BRANCH"
          echo "Branch $NEW_BRANCH created and pushed successfully."
          
  # notify:
  #   runs-on: ubuntu-latest
  #   needs: [test, build, docker_build_push, k8s-manifest-files_update]
  #   if: always() # Ensures this job always runs
  #   steps:
  #     - name: Determine pipeline status
  #       id: status-check
  #       run: |
  #         if [[ "${{ needs.test.result }}" == "failure" || \
  #               "${{ needs.build.result }}" == "failure" || \
  #               "${{ needs.docker_build_push.result }}" == "failure" || \
  #               "${{ needs.k8s-manifest-files_update.result }}" == "failure" ]]; then
  #           echo "status=failure" >> $GITHUB_ENV
  #           echo "color=#FF0000" >> $GITHUB_ENV # Red for failure
  #         else
  #           echo "status=success" >> $GITHUB_ENV
  #           echo "color=#36A64F" >> $GITHUB_ENV # Green for success
  #         fi

  #     - name: Slack notification
  #       uses: slackapi/slack-github-action@v2.0.0
  #       with:
  #         webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
  #         webhook-type: incoming-webhook
  #         payload: >
  #           {
  #             "attachments": [
  #               {
  #                 "color": "${{ env.color }}",
  #                 "text": "*Pipeline Status:* CI Pipeline - ${{ env.status }}\n
  #                           *Build Number:* ${{ github.run_number }}\n
  #                           *Workflow Number:* ${{ github.run_id }}\n
  #                           *Commit:* ${{ github.sha }}\n
  #                           *URL:* https://github.com/${{ github.repository }}/commit/${{ github.sha }}\n
  #                           *Failed Job(s):* ${{ needs.test.result == 'failure' && 'Test' || '' }}${{ needs.build.result == 'failure' && ' Build' || '' }}${{ needs.docker_build_push.result == 'failure' && ' Docker Build' || '' }}${{ needs.k8s-manifest-files_update.result == 'failure' && ' K8s Update' || '' }}"
  #               }
  #             ]
  #           }
