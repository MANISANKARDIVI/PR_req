name: Go - CI Pipeline
on:
  push:
    branches:
      - main
    paths:
      - .github/workflows/go.yml
      - go-test/**
  pull_request:
    branches:
      - dev
    paths:
      - .github/workflows/go.yml
      - go-test/**
jobs:
  test:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Go Version
        uses: actions/setup-go@v5
        with:
          go-version: 1.23.2
          check-latest: true
          cache-dependency-path: go-test/go.sum
      - name: Install dependencies
        run: |
          cd go-test
          go mod tidy
          go mod download
      - name: Run tests
        run: |
          cd go-test
          go test -v ./...
          
  build:
    runs-on: ubuntu-24.04
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Build the application
        run: |
          cd go-test
          mkdir -p dist
          CGO_ENABLED=1 go build -v -o dist/main ./...
      - name: Debug build output
        run: |
          echo "Contents of dist:"
          ls -la go-test/dist
          
  docker_build_push:
    runs-on: ubuntu-24.04
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Read version from VERSION file
        id: read_version
        run: |
          VERSION=$(cat go-test/VERSION | xargs)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: go-test
          file: go-test/Dockerfile
          push: true
          tags: manisankardivi/go-test:${{ env.VERSION }}
          cache-from: type=registry,ref=manisankardivi/go-test:${{ env.VERSION }}
          cache-to: type=inline
          
  k8s-manifest-files_update:
    runs-on: ubuntu-24.04
    needs: docker_build_push
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Read version from VERSION file
        run: >
          echo "Listing files in the repository root:"

          ls -la

          echo "Navigating to go-test directory:"

          cd go-test

          ls -la

          VERSION=$(cat VERSION)

          echo "Version extracted: $VERSION"

          echo "VERSION=$VERSION" >> $GITHUB_ENV  # Save version to environment variable
      - name: Checkout Kubernetes repo
        run: >
          echo "Cloning Kubernetes repo..."

          git clone https://x-access-token:${{ secrets.PERSONAL_ACCESS_TOKEN }}@github.com/MANISANKARDIVI/k8s_repo.git

          cd k8s_repo/go-k8s

          echo "Using version: $VERSION"

          echo "Updating image version in manifest.yaml..."

          sed -i "s|manisankardivi/go-test:.*|manisankardivi/go-test:$VERSION|" manifest.yaml

          # sed -i "s|\$VERSION|$VERSION|" manifest.yaml

          echo "Image Section after update:"

          grep "image: manisankardivi/go-test:*" manifest.yaml
      - name: Check for changes and commit if updated
        run: >
          ls -la

          cd k8s_repo/go-k8s

          ls -la

          git config --global user.email "manisankardivi@gmail.com"

          git config --global user.name "manisankardivi"

          git add manifest.yaml

          if git diff --cached --exit-code --quiet; then
            echo "No changes detected in manifest.yaml. Skipping commit and branch creation."
            echo "SKIP_BRANCH=true" >> $GITHUB_ENV
          else
            echo "Changes detected. Committing changes."
            git commit -m "Updated manifest.yaml with version $VERSION | GitHub Actions Pipeline"
            echo "SKIP_BRANCH=false" >> $GITHUB_ENV
          fi
      - name: Create and push new branch with version (if changes exist)
        if: env.SKIP_BRANCH == 'false'
        run: >
          cd k8s_repo/go-k8s

          git pull origin main --rebase # Ensure the local main is up-to-date with the remote

          NEW_BRANCH="release-v$VERSION"

          echo "Checking if branch $NEW_BRANCH already exists on the remote..."

          if git ls-remote --heads origin "$NEW_BRANCH" | grep "$NEW_BRANCH"; then
            echo "Branch $NEW_BRANCH already exists. Skipping branch creation."
          else
            echo "Branch $NEW_BRANCH does not exist. Creating and pushing it..."
            git checkout -b "$NEW_BRANCH"
            git push origin "$NEW_BRANCH"
            echo "Branch $NEW_BRANCH created and pushed successfully."
          fi
##
