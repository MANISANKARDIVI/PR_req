name: Go - CI Pipeline

on:
  push:
    branches:
      - main
    paths:
      - ".github/workflows/go.yml"
      - "go-test/**"
  pull_request:
    branches:
      - dev
    paths:
      - ".github/workflows/go.yml"
      - "go-test/**"

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go Version
        uses: actions/setup-go@v5
        with:
          go-version: "1.23.2"
          check-latest: true
          cache-dependency-path: "go-test/go.sum"

      - name: Install dependencies
        run: |
          cd go-test
          go mod tidy
          go mod download

      - name: Run tests
        run: |
          cd go-test
          go test -v ./...

  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build the application
        run: |
          cd go-test
          mkdir -p dist
          CGO_ENABLED=1 go build -v -o dist/main ./...

      - name: Debug build output
        run: |
          echo "Contents of dist:"
          ls -la go-test/dist

  docker_build_push:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Install doctl.
      # - name: Install doctl
      #   uses: digitalocean/action-doctl@v2
      #   with:
      #     token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}  # create secret for Digital-Ocean token

      # - name: Build container image
      # # create secret for Digital-Ocean Registry Name
      #   run: docker build -t ${{ secrets.REGISTRY_NAME }}/go:$VERSION .

      # # Image push to Digital-Ocean Registry
      # - name: Push image to Digital-Ocean Container Registry
      #   run: docker push ${{ secrets.REGISTRY_NAME }}/go:$VERSION

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Read version from VERSION file
        id: read_version
        run: |
          if [ -f go-test/VERSION ]; then
            VERSION=$(cat go-test/VERSION | xargs)
            echo "VERSION=$VERSION" >> $GITHUB_ENV
          else
            echo "VERSION file not found!"
            exit 1
          fi
      - name: Build and push Docker image
        run: |
          cd go-test
          docker build -t manisankardivi/go-test:${{ env.VERSION }} .

      - name: Push Docker Image (main branch only)
        if: github.ref == 'refs/heads/main'
        run: |
          echo "Pushing Docker image to the registry..."
          docker push manisankardivi/go-test:${{ env.VERSION }}

  k8s-manifest-files_update:
    runs-on: ubuntu-latest
    needs: docker_build_push
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout Kubernetes repo
        run: |
          git clone https://x-access-token:${{ secrets.PERSONAL_ACCESS_TOKEN }}@github.com/MANISANKARDIVI/k8s_repo.git
          cd k8s_repo/go-k8s
          sed -i "s|image: manisankardivi/go-test:.*|image: manisankardivi/go-test:${{ env.VERSION }}|" manifest.yaml
          echo "Updated manifest.yaml:"
          grep "image: manisankardivi/go-test:" manifest.yaml
          cat manifest.yaml

      - name: Commit and push changes
        run: |
          cd k8s_repo/go-k8s
          git config --global user.email "manisankardivi@gmail.com"
          git config --global user.name "manisankardivi"
          git add .
          if git diff --cached --exit-code --quiet; then
            echo "No changes detected."
          else
            git commit -m "Updated manifest.yaml with version ${{ env.VERSION }}"
            git push origin main
          fi
